package org.GeoRaptor.SpatialView;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;

import java.sql.Connection;
import java.sql.SQLException;

import java.util.Iterator;
import java.util.LinkedHashMap;

import javax.swing.InputVerifier;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import org.GeoRaptor.Constants;
import org.GeoRaptor.MainSettings;
import org.GeoRaptor.OracleSpatial.SRID.SRIDPanel;
import org.GeoRaptor.sql.Queries;
import org.GeoRaptor.tools.PropertiesManager;
import org.GeoRaptor.tools.Strings;
import org.GeoRaptor.tools.Tools;
import org.GeoRaptor.util.logging.Logger;
import org.GeoRaptor.util.logging.Logging;


/*
 * SpatialViewProperties.java
 *
 * Created on 04/11/2010, 3:13:11 PM
 */

/**
 *
 * @author Simon
 */
public class SpatialViewProperties 
     extends javax.swing.JDialog 
{

	private static final long serialVersionUID = 699459448405912506L;

	private static final Logger LOGGER = Logging.getLogger("org.GeoRaptor.SpatialView.SpatialViewProperties");

    /** 
     * Properties File Manager
     **/
    private static final String propertiesFile = "org.GeoRaptor.SpatialView.SpatialView";
    protected PropertiesManager propertyManager;
  
    private SpatialView spatialView = null;
  
    private LinkedHashMap<String, String> unitsOfMeasure;
    private LinkedHashMap<String, String> unitsOfArea;

    private boolean CANCELLED = false;
    
     /** Creates new form SpatialViewProperties */
     public SpatialViewProperties(java.awt.Frame parent, 
                                  boolean modal,
                                  SpatialView _spatialView) {
        super(parent, modal);
        // Get localisation file
        //
        this.propertyManager = new PropertiesManager(SpatialViewProperties.propertiesFile);
        this.spatialView = _spatialView;
        initComponents();
        setInternationalisation();
        addVerifier();
        Dimension d = this.getPreferredSize();
        // d.width += 10; d.height += 20;   
        this.setSize(d);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlProperties = new javax.swing.JPanel();
        tfSRID = new javax.swing.JTextField();
        tfViewName = new javax.swing.JTextField();
        lblSRIDType = new javax.swing.JLabel();
        lblSRID = new javax.swing.JLabel();
        cmbSRIDType = new javax.swing.JComboBox<String>();
        btnOK = new javax.swing.JButton();
        tfPrecision = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        lblViewName = new javax.swing.JLabel();
        lblPrecision = new javax.swing.JLabel();
        lblVisibleName = new javax.swing.JLabel();
        tfVisibleName = new javax.swing.JTextField();
        lblBackground = new javax.swing.JLabel();
        btnBackgroundColor = new javax.swing.JButton();
        btnDiscoverSRIDType = new javax.swing.JButton();
        btnSRID = new javax.swing.JButton();
        lblAntialiasing = new javax.swing.JLabel();
        cmbAntialiasing = new javax.swing.JComboBox<String>();
        lblSridBaseUnit = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tfUOD = new javax.swing.JTextField();
        lblUOA = new javax.swing.JLabel();
        cmbAreaUnits = new javax.swing.JComboBox<String>();
        tfUOA = new javax.swing.JTextField();
        lblUOD = new javax.swing.JLabel();
        cmbDistanceUnits = new javax.swing.JComboBox<String>();
        cbScaleBar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        pnlProperties.setBorder(javax.swing.BorderFactory.createTitledBorder("View Properties"));
        pnlProperties.setMaximumSize(new java.awt.Dimension(373, 314));
        pnlProperties.setMinimumSize(new java.awt.Dimension(373, 314));

        tfSRID.setEditable(false);
        tfSRID.setMaximumSize(new java.awt.Dimension(60, 20));
        tfSRID.setMinimumSize(new java.awt.Dimension(60, 20));
        tfSRID.setPreferredSize(new java.awt.Dimension(60, 20));

        tfViewName.setMaximumSize(new java.awt.Dimension(97, 20));
        tfViewName.setMinimumSize(new java.awt.Dimension(97, 20));
        tfViewName.setPreferredSize(new java.awt.Dimension(97, 20));

        lblSRIDType.setText("SRID Type:");

        lblSRID.setText("SRID:");

        cmbSRIDType.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "COMPOUND", "ENGINEERING", "GEODETIC_COMPOUND", "GEODETIC_GEOCENTRIC", "GEODETIC_GEOGRAPHIC2D", "GEODETIC_GEOGRAPHIC3D", "GEOGRAPHIC2D", "PROJECTED", "UNKNOWN" }));
        cmbSRIDType.setSelectedIndex(5);
        cmbSRIDType.setMaximumSize(new java.awt.Dimension(165, 20));
        cmbSRIDType.setMinimumSize(new java.awt.Dimension(165, 20));
        cmbSRIDType.setPreferredSize(new java.awt.Dimension(165, 20));
        cmbSRIDType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSRIDTypeActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.setMaximumSize(new java.awt.Dimension(63, 23));
        btnOK.setMinimumSize(new java.awt.Dimension(65, 23));
        btnOK.setPreferredSize(new java.awt.Dimension(65, 23));
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        tfPrecision.setText("0.005");
        tfPrecision.setMaximumSize(new java.awt.Dimension(44, 20));
        tfPrecision.setMinimumSize(new java.awt.Dimension(44, 20));
        tfPrecision.setPreferredSize(new java.awt.Dimension(44, 20));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblViewName.setText("View Name:");

        lblPrecision.setText("Precision:");

        lblVisibleName.setText("Visible Name:");

        tfVisibleName.setMaximumSize(new java.awt.Dimension(254, 20));
        tfVisibleName.setMinimumSize(new java.awt.Dimension(254, 20));
        tfVisibleName.setPreferredSize(new java.awt.Dimension(254, 20));

        lblBackground.setText("Map Background:");

        btnBackgroundColor.setText("Color");
        btnBackgroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackgroundColorActionPerformed(evt);
            }
        });

        btnDiscoverSRIDType.setText("Discover");
        btnDiscoverSRIDType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscoverSRIDTypeActionPerformed(evt);
            }
        });

        btnSRID.setText("SRID");
        btnSRID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSRIDActionPerformed(evt);
            }
        });

        lblAntialiasing.setText("Antialiasing:");

        cmbAntialiasing.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "NORMAL", "QUALITY", "SPEED" }));
        cmbAntialiasing.setMaximumSize(new java.awt.Dimension(84, 20));
        cmbAntialiasing.setMinimumSize(new java.awt.Dimension(84, 20));
        cmbAntialiasing.setPreferredSize(new java.awt.Dimension(84, 20));

        lblSridBaseUnit.setText("Metre");
        lblSridBaseUnit.setMaximumSize(new java.awt.Dimension(121, 19));
        lblSridBaseUnit.setMinimumSize(new java.awt.Dimension(121, 19));
        lblSridBaseUnit.setPreferredSize(new java.awt.Dimension(121, 19));

        jLabel1.setText("SRID Base Unit:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Measurement"));
        jPanel1.setMaximumSize(new java.awt.Dimension(368, 83));
        jPanel1.setMinimumSize(new java.awt.Dimension(368, 83));
        jPanel1.setPreferredSize(new java.awt.Dimension(368, 83));

        tfUOD.setText("M");
        tfUOD.setMaximumSize(new java.awt.Dimension(84, 20));
        tfUOD.setMinimumSize(new java.awt.Dimension(84, 20));
        tfUOD.setPreferredSize(new java.awt.Dimension(84, 20));
        tfUOD.setRequestFocusEnabled(false);

        lblUOA.setText("Area Units:");

        cmbAreaUnits.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Sq Meter", "Hectares", "Sq Feet" }));
        cmbAreaUnits.setMaximumSize(new java.awt.Dimension(164, 20));
        cmbAreaUnits.setMinimumSize(new java.awt.Dimension(164, 20));
        cmbAreaUnits.setPreferredSize(new java.awt.Dimension(164, 20));
        cmbAreaUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAreaUnitsItemStateChanged(evt);
            }
        });

        tfUOA.setText("SQ_M");
        tfUOA.setMaximumSize(new java.awt.Dimension(84, 20));
        tfUOA.setMinimumSize(new java.awt.Dimension(84, 20));
        tfUOA.setPreferredSize(new java.awt.Dimension(84, 20));
        tfUOA.setRequestFocusEnabled(false);

        lblUOD.setText("Distance Unit:");

        cmbDistanceUnits.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Feet", "Meter" }));
        cmbDistanceUnits.setMaximumSize(new java.awt.Dimension(164, 20));
        cmbDistanceUnits.setMinimumSize(new java.awt.Dimension(164, 20));
        cmbDistanceUnits.setPreferredSize(new java.awt.Dimension(164, 20));
        cmbDistanceUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDistanceUnitsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUOA)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblUOD)
                        .addGap(11, 11, 11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfUOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfUOA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDistanceUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAreaUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblUOD)
                    .addComponent(tfUOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDistanceUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblUOA)
                    .addComponent(tfUOA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAreaUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        cbScaleBar.setText("Scale Bar:  ");
        cbScaleBar.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cbScaleBar.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cbScaleBar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbScaleBar.setMaximumSize(new java.awt.Dimension(89, 19));
        cbScaleBar.setMinimumSize(new java.awt.Dimension(89, 19));
        cbScaleBar.setPreferredSize(new java.awt.Dimension(89, 19));
        cbScaleBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbScaleBarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPropertiesLayout = new javax.swing.GroupLayout(pnlProperties);
        pnlProperties.setLayout(pnlPropertiesLayout);
        pnlPropertiesLayout.setHorizontalGroup(
            pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPropertiesLayout.createSequentialGroup()
                .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPropertiesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAntialiasing, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPrecision, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBackground, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSRID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblViewName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblVisibleName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSRIDType, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfViewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfVisibleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPropertiesLayout.createSequentialGroup()
                                .addComponent(cmbSRIDType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDiscoverSRIDType, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPropertiesLayout.createSequentialGroup()
                                .addComponent(tfSRID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSRID))
                            .addComponent(lblSridBaseUnit, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addGroup(pnlPropertiesLayout.createSequentialGroup()
                                .addComponent(btnBackgroundColor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPropertiesLayout.createSequentialGroup()
                                .addComponent(tfPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbAntialiasing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlPropertiesLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(cbScaleBar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPropertiesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPropertiesLayout.createSequentialGroup()
                                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancel))
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        pnlPropertiesLayout.setVerticalGroup(
            pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPropertiesLayout.createSequentialGroup()
                .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrecision, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPropertiesLayout.createSequentialGroup()
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfViewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblViewName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfVisibleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblVisibleName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tfSRID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSRID)
                            .addComponent(lblSRID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbSRIDType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDiscoverSRIDType)
                            .addComponent(lblSRIDType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSridBaseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBackgroundColor)
                            .addComponent(lblBackground))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAntialiasing)
                    .addComponent(cmbAntialiasing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbScaleBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean wasCancelled() {
      return this.CANCELLED;
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.CANCELLED = true;
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        processOKButton();
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbDistanceUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDistanceUnitsItemStateChanged
      if ( ! cmbDistanceUnits.isEnabled() )
          return;
      String selectedValue = cmbDistanceUnits.getSelectedItem().toString();
      if ( !Strings.isEmpty(selectedValue) ) {
        Iterator<String> keyIter = unitsOfMeasure.keySet().iterator();
        while (keyIter.hasNext()) {
            String key = (String)keyIter.next();  // Get the next key.
            String value = unitsOfMeasure.get(key);
            if ( value.equals(selectedValue) ) {
                tfUOD.setEditable(true);
                tfUOD.setText(key);         // Assign actual oracle unit (the key) to the display
                tfUOD.setEditable(false);
            }
        }
      }
    }//GEN-LAST:event_cmbDistanceUnitsItemStateChanged

    private void cmbAreaUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAreaUnitsItemStateChanged
        if ( ! cmbAreaUnits.isEnabled() )
            return;
        String selectedValue = cmbAreaUnits.getSelectedItem().toString();
        if ( !Strings.isEmpty(selectedValue) ) {
          Iterator<String> keyIter = unitsOfArea.keySet().iterator();
          while (keyIter.hasNext()) {
              String key = keyIter.next();  // Get the next key.
              String value = unitsOfArea.get(key);
              if ( value.equals(selectedValue) ) {
                  tfUOA.setEditable(true);
                  tfUOA.setText(key);       // Assign actual Oracle unit to display
                  tfUOA.setEditable(false);
              }
          }
        }
    }//GEN-LAST:event_cmbAreaUnitsItemStateChanged

    private void btnBackgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackgroundColorActionPerformed
        final Color backgroundColor =
                JColorChooser.showDialog(this,
                                         "Spatial View properties - Background color",
                                         this.spatialView.getMapPanel().getBackground());
        if (backgroundColor != null) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    btnBackgroundColor.setBackground(backgroundColor);
                }
            });
        }

    }//GEN-LAST:event_btnBackgroundColorActionPerformed

    private void btnDiscoverSRIDTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscoverSRIDTypeActionPerformed
        discoverSetSRIDType();
    }//GEN-LAST:event_btnDiscoverSRIDTypeActionPerformed

    private void btnSRIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSRIDActionPerformed
        // processSRIDAction sets tfViewName
        processSRIDAction();
        if ( this.tfVisibleName.getText().equals("SRID:NULL") ) {
            this.tfVisibleName.setText(this.tfViewName.getText());
        }
        discoverSetSRIDType();
    }//GEN-LAST:event_btnSRIDActionPerformed

    private void cmbSRIDTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSRIDTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSRIDTypeActionPerformed

    private void cbScaleBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbScaleBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbScaleBarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackgroundColor;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDiscoverSRIDType;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSRID;
    private javax.swing.JCheckBox cbScaleBar;
    private javax.swing.JComboBox<String> cmbAntialiasing;
    private javax.swing.JComboBox<String> cmbAreaUnits;
    private javax.swing.JComboBox<String> cmbDistanceUnits;
    private javax.swing.JComboBox<String> cmbSRIDType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAntialiasing;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblPrecision;
    private javax.swing.JLabel lblSRID;
    private javax.swing.JLabel lblSRIDType;
    private javax.swing.JLabel lblSridBaseUnit;
    private javax.swing.JLabel lblUOA;
    private javax.swing.JLabel lblUOD;
    private javax.swing.JLabel lblViewName;
    private javax.swing.JLabel lblVisibleName;
    private javax.swing.JPanel pnlProperties;
    private javax.swing.JTextField tfPrecision;
    private javax.swing.JTextField tfSRID;
    private javax.swing.JTextField tfUOA;
    private javax.swing.JTextField tfUOD;
    private javax.swing.JTextField tfViewName;
    private javax.swing.JTextField tfVisibleName;
    // End of variables declaration//GEN-END:variables

    private void processSRIDAction()
    {
        Connection c = this.spatialView.getConnection();
        if ( c == null ) {
            // TOBEDONE: Need error message
            LOGGER.error(propertyManager.getMsg("SVP_NULL_CONNECTION"));
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        this.setAlwaysOnTop(false);
        SRIDPanel sp = SRIDPanel.getInstance();
        boolean status = sp.initialise(c,this.tfSRID.getText());
        if (status == true) {
            sp.setLocationRelativeTo(this);
            sp.setVisible(true);
            if ( ! sp.formCancelled() ) {
                this.tfSRID.setText(sp.getSRID());
                this.tfViewName.setText("SRID:" + this.tfSRID.getText());
            }
        }
        this.setAlwaysOnTop(true);
    }

    public void setInternationalisation() {
        pnlProperties.setBorder(javax.swing.BorderFactory.createTitledBorder(this.propertyManager.getMsg("SVP_BORDER")));
        lblViewName.setText(this.propertyManager.getMsg("SVP_VIEW_NAME"));
        lblVisibleName.setText(this.propertyManager.getMsg("SVP_VISIBLE_NAME"));
        lblSRID.setText(this.propertyManager.getMsg("SVP_SRID"));
        lblSRIDType.setText(this.propertyManager.getMsg("SVP_SRID_TYPE"));
        btnDiscoverSRIDType.setText(this.propertyManager.getMsg("SVP_DISCOVER_SRID_TYPE"));
        btnDiscoverSRIDType.setToolTipText(this.propertyManager.getMsg("SVP_TT_DISCOVER_SRID_TYPE"));
        lblPrecision.setText(this.propertyManager.getMsg("SVP_PRECISION"));
        tfPrecision.setToolTipText(this.propertyManager.getMsg("SVP_TT_PRECISION"));
        lblUOD.setText(this.propertyManager.getMsg("SVP_UOD"));
        lblUOA.setText(this.propertyManager.getMsg("SVP_UOA"));
        btnOK.setText(this.propertyManager.getMsg("SVP_OK"));
        btnCancel.setText(this.propertyManager.getMsg("SVP_CANCEL"));
        lblBackground.setText(this.propertyManager.getMsg("SVP_LABEL_BACKGROUND"));
        btnBackgroundColor.setText(this.propertyManager.getMsg("SVP_BACKGROUND_COLOR"));
    }

    private void discoverSetSRIDType() {
      Constants.SRID_TYPE SRIDType = Tools.discoverSRIDType(this.tfSRID.getText());
      for ( int i=0; i<cmbSRIDType.getItemCount(); i++ ) {
          if ( cmbSRIDType.getItemAt(i).equals(SRIDType.toString()) ) {
              cmbSRIDType.setSelectedIndex(i);
              break;
          }
      }
    }
    
    public boolean initDialog(final boolean _showSRIDButton) 
    {
        final Connection conn = spatialView.getConnection();
        if ( conn==null ) {
            JOptionPane.showMessageDialog(null,
                                    propertyManager.getMsg("SVP_NULL_CONNECTION"),
                                    propertyManager.getMsg("SVP_BORDER"),
                                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        SwingUtilities.invokeLater(new Runnable() {
            public void run()
            {
                tfViewName.setText(spatialView.getViewName());
                tfViewName.setEnabled(false);
                tfVisibleName.setText(spatialView.getVisibleName());
                tfSRID.setText(spatialView.getSRID());
                tfSRID.setEnabled(false);
                btnSRID.setVisible(_showSRIDButton); 
                btnSRID.setEnabled(_showSRIDButton);
                lblSridBaseUnit.setText(spatialView.getSRIDBaseUnitType());
                cmbSRIDType.setModel(Constants.getSRIDTypeCombo());
                if ( spatialView.getSRIDType()==Constants.SRID_TYPE.UNKNOWN ) {
                    discoverSetSRIDType();                  
                } else {
                  for ( int i=0; i<cmbSRIDType.getItemCount(); i++ ) {
                      if ( cmbSRIDType.getItemAt(i).equals(spatialView.getSRIDType().toString()) ) { 
                          cmbSRIDType.setSelectedIndex(i);
                          break;
                      }
                  }
                }
                int precision = spatialView.getPrecision(false);
                tfPrecision.setText(String.valueOf(precision<0?spatialView.getDefaultPrecision():precision));
                tfUOD.setText(spatialView.getDistanceUnitType());
                tfUOD.setEditable(false);
                tfUOA.setText(spatialView.getAreaUnitType());
                tfUOA.setEditable(false);
                btnBackgroundColor.setBackground(spatialView.getMapPanel().getMapBackground());
                // When SRID is NULL we can use the unit to report units but not supply to oracle's sdo_area and sdo_length functions.
                try {
                  unitsOfMeasure = Queries.getUnitsOfMeasure(spatialView.getConnection(),true /* length*/);
                  if ( unitsOfMeasure != null ) {
                      int i = -1;
                      int selectedItem = 0;
                      // Load cmbDistanceUnits
                      cmbDistanceUnits.setEnabled(false);
                      cmbDistanceUnits.removeAllItems();
                      Iterator<String> keyIter = unitsOfMeasure.keySet().iterator();
                      while (keyIter.hasNext()) {
                          i++;
                          String key = (String)keyIter.next();  // Get the next key.
                          cmbDistanceUnits.addItem(unitsOfMeasure.get(key)); // Add associated value to Combo
                          if ( key.equalsIgnoreCase(tfUOD.getText()) ||
                              unitsOfMeasure.get(key).equalsIgnoreCase(tfUOD.getText()) ) 
                          {
                              selectedItem = i;
                          } 
                      }
                      cmbDistanceUnits.setSelectedIndex(selectedItem);
                      cmbDistanceUnits.setEnabled(true);
                      cmbDistanceUnits.setEditable(false);
                  }
                
                  unitsOfArea = Queries.getUnitsOfMeasure(spatialView.getConnection(),false /*area*/);
                  if ( unitsOfArea != null ) {
                      // Load cmbAreaUnits 
                      int i = -1;
                      int selectedItem = 0;
                      cmbAreaUnits.setEnabled(false);
                      cmbAreaUnits.removeAllItems();
                      Iterator<String> keyIter = unitsOfArea.keySet().iterator();
                      while (keyIter.hasNext()) {
                          i++;
                          String key = (String)keyIter.next();  // Get the next key.
                          cmbAreaUnits.addItem(unitsOfArea.get(key)); // Add associated value to Combo
                          if ( key.equalsIgnoreCase(tfUOA.getText()) ||
                              unitsOfArea.get(key).equalsIgnoreCase(tfUOA.getText()) ) {
                              selectedItem = i;
                          }    
                        }
                      cmbAreaUnits.setSelectedIndex(selectedItem);
                      cmbAreaUnits.setEnabled(true);
                      cmbAreaUnits.setEditable(false);
                  }

                  // Set antialiasing
                  cmbAntialiasing.setModel(
                          new javax.swing.DefaultComboBoxModel<String>(
                                  new String[] { MapPanel.RENDER_HINTS.NORMAL.toString(),
                                                 MapPanel.RENDER_HINTS.QUALITY.toString(),
                                                 MapPanel.RENDER_HINTS.SPEED.toString()
                                               }));
                  for ( int i=0; i<cmbAntialiasing.getItemCount(); i++ ) {
                      if ( cmbAntialiasing.getItemAt(i).equals(spatialView.getMapPanel().getRenderHint().toString()) ) { 
                          cmbAntialiasing.setSelectedIndex(i);
                          break;
                      }
                  }
                  cbScaleBar.setSelected(spatialView.isScaleBar());
                } catch (SQLException sqle) {
                    // Catch SQLException and IllegalArgumentException in one
                    String error = sqle.toString();
                    error = Strings.isEmpty(error)?propertyManager.getMsg("SVP_ERROR_QUERY_MEASUREMENTS"):error;
                    JOptionPane.showMessageDialog(null,
                                            propertyManager.getMsg("QUERY_ERROR", error),
                                            MainSettings.EXTENSION_NAME,
                                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        return true;
    }

    private void addVerifier() {
      InputVerifier verifyPrecision = new InputVerifier() {
            public boolean verify(JComponent comp) {
                boolean returnValue = true;
                JTextField textField = (JTextField)comp;
                try {
                    if (Strings.isEmpty(textField.getText().trim()) ) {
                        textField.setText(String.valueOf(spatialView.getPrecision(false)));
                    } else {
                        // This will throw an exception if the value is not an integer
                        int value = Integer.parseInt(textField.getText());
                        if ( value > 15 || value < 0 )
                            throw new NumberFormatException();
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, 
                                                  "precision must be integer between 0 and 15",
                                                  MainSettings.EXTENSION_NAME,
                                                  JOptionPane.ERROR_MESSAGE);
                    returnValue = false;
                }
                return returnValue;
            }
        };
      tfPrecision.setInputVerifier(verifyPrecision);
    }
  
  private void processOKButton()
  {
	  try 
	  {
		  spatialView.setViewName(tfViewName.getText());
		  spatialView.setSRID(tfSRID.getText());
		  spatialView.setVisibleName(tfVisibleName.getText());
		  if ( ! cmbSRIDType.getSelectedItem().toString().equalsIgnoreCase(spatialView.getSRIDType().toString()) )
			  spatialView.setSRIDType(cmbSRIDType.getSelectedItem().toString());
		  if ( ! tfPrecision.getText().trim().isEmpty() )
			  spatialView.setPrecision(Integer.valueOf(tfPrecision.getText()));
		  spatialView.setPrecision(tfPrecision.getText());
		  spatialView.setDistanceUnitType(tfUOD.getText());
		  spatialView.setAreaUnitType(tfUOA.getText());
		  // SGG FIX     spatialView.setDistanceUnitType();
		  spatialView.getMapPanel().setMapBackground(btnBackgroundColor.getBackground());
		  spatialView.getMapPanel().setRenderHint(cmbAntialiasing.getSelectedItem().toString());
		  spatialView.setScaleBar(cbScaleBar.isSelected());
		  // In case precision changed.
		  spatialView.getSVPanel().updateViewStatusMBR(spatialView.getMBR(),spatialView.getPrecision(false));
	  } catch (Exception e) {
		  e.printStackTrace();
	  }
      this.setVisible(false);
  }
  
}
